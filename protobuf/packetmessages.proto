syntax = "proto2";

message ServerInfo
{
	optional int32 protocol = 1;			// protocol version
	optional int32 server_count = 2;		// number of changelevels since server start
	optional bool is_dedicated = 3;  		// dedicated server ?	
	optional bool is_official_valve_server = 4;
	optional bool is_hltv = 5;				// HLTV server ?
	optional bool is_replay = 6;			// Replay server ?
	optional bool is_redirecting_to_proxy_relay = 21;	// // Will be redirecting to proxy relay
	optional int32 c_os = 7;				// L = linux, W = Win32
	optional fixed32 map_crc = 8;			// server map CRC
	optional fixed32 client_crc = 9;		// client.dll CRC server is using
	optional fixed32 string_table_crc = 10;	// string table CRC server is using
	optional int32 max_clients = 11;		// max number of clients on server
	optional int32 max_classes = 12;		// max number of server classes
	optional int32 player_slot = 13;		// our client slot number
	optional float tick_interval = 14;		// server tick interval
	optional string game_dir = 15;			// game directory eg "tf2"
	optional string map_name = 16;			// name of current map 
	optional string map_group_name = 17;	// name of current map 
	optional string sky_name = 18;			// name of current skybox 
	optional string host_name = 19;			// server name
	optional uint64 ugc_map_id = 22;	
}

message CreateStringTable
{
	optional string name = 1;
	optional int32 max_entries = 2;
	optional int32 num_entries = 3;
	optional bool user_data_fixed_size = 4;
	optional int32 user_data_size = 5;
	optional int32 user_data_size_bits = 6;
	optional int32 flags = 7;
	optional bytes string_data = 8;
}

message UpdateStringTable
{
	optional int32 table_id = 1;
	optional int32 num_changed_entries = 2;
	optional bytes string_data = 3;
}

message UserMessage
{
	optional int32 msg_type = 1;
	optional bytes msg_data = 2;	
}

message GameEvent
{
	message key_t
	{
		optional int32 type = 1;			// type
		optional string val_string = 2;		// TYPE_STRING
		optional float val_float = 3;		// TYPE_FLOAT 
		optional int32 val_long = 4;		// TYPE_LONG  
		optional int32 val_short = 5;		// TYPE_SHORT 
		optional int32 val_byte = 6;		// TYPE_BYTE  
		optional bool val_bool = 7;			// TYPE_BOOL  
		optional uint64 val_uint64 = 8;		// TYPE_UINT64
		optional bytes val_wstring = 9;		// TYPE_WSTRING
	}

	optional string event_name = 1;
	optional int32 eventid = 2;
	repeated key_t keys = 3;
}

message GameEventList
{
	message key_t
	{
		optional int32 type = 1;
		optional string name = 2;
	};

	message descriptor_t
	{
		optional int32 eventid = 1;
		optional string name = 2;
		repeated key_t keys = 3;
	};

	repeated descriptor_t descriptors = 1;
}

message PacketEntities
{
	optional int32 max_entries = 1;
	optional int32 updated_entries = 2;
	optional bool is_delta = 3;	
	optional bool update_baseline = 4;
	optional int32 baseline = 5;
	optional int32 delta_from = 6;
	optional bytes entity_data = 7;
}

message SendTable
{
	message sendprop_t
	{
		optional int32 type = 1;				// SendPropType
		optional string var_name = 2;
		optional int32 flags = 3;
		optional int32 priority = 4;
		optional string dt_name = 5;			// if pProp->m_Type == DPT_DataTable || IsExcludeProp
		optional int32 num_elements = 6;		// else if pProp->m_Type == DPT_Array
		optional float low_value = 7;			// else ...
		optional float high_value = 8;			// 		...
		optional int32 num_bits = 9;			//		...
	};

	optional bool is_end = 1;
	optional string net_table_name = 2;
	optional bool needs_decoder = 3;
	repeated sendprop_t props = 4;
}
